#include<cstdio>
#include <windows.h>
#include<math.h>
#include <vector>
#include <cstdlib>
# define PI 3.14159265358979323846
#include <GL/gl.h>
#include <GL/glut.h>
#include<MMSystem.h>
void PointLight(const float x, const float y, const float z, const float amb, const float diff, const float spec);
void PointLight(const float x, const float y, const float z, const float amb, const float diff, const float spec)
{
	glEnable(GL_LIGHTING);
	GLfloat light_ambient[] = { amb,amb,amb, 1.0 };
	GLfloat light_position[] = { -0.9,.9,0, 0.0 };
	glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
	glLightfv(GL_LIGHT0, GL_POSITION, light_position);
	glEnable(GL_LIGHT0); //enable the light after setting the properties
}
GLfloat position22 = 0.0f;
GLfloat speed22 = 0.007f;
void birdd(int value) {
	if (position22 > 1.0)
		position22 = -1.0f;
	position22 += speed22;
	glutPostRedisplay();
	glutTimerFunc(100, birdd, 0);
}
GLfloat position4 = 0.0f;
GLfloat speed4 = -0.01f;

GLfloat position3 = 0.0f;
GLfloat speed3 = -0.5f;
void rain(int value) {
	if (position3 < -1.0)
		position3 = 1.0f;
	position3 += speed3;
	glutPostRedisplay();
	glutTimerFunc(100, rain, 0);
}
GLfloat position2 = 0.0f;
GLfloat speed2 = 0.004f;
void cloud(int value) {
	if (position2 > 1.0)
		position2 = -1.0f;
	position2 += speed2;
	glutPostRedisplay();
	glutTimerFunc(100, cloud, 0);
}

void cloud1()
{
	int i;

	GLfloat x = .5f; GLfloat y = .86f; GLfloat radius = .05f;
	int triangleAmount = 20;
	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(x, y); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			x + (radius * cos(i *  twicePi / triangleAmount)),
			y + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat a = .55f; GLfloat b = .83f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(a, b); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			a + (radius * cos(i *  twicePi / triangleAmount)),
			b + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat c = .45f; GLfloat d = .83f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(c, d); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			c + (radius * cos(i *  twicePi / triangleAmount)),
			d + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat e = .52f; GLfloat f = .8f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(e, f); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			e + (radius * cos(i *  twicePi / triangleAmount)),
			f + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat g = .6f; GLfloat h = .82f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(g, h); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			g + (radius * cos(i *  twicePi / triangleAmount)),
			h + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();


}

void cloud2()
{
	// glLoadIdentity();
	int i;

	GLfloat x = -.5f; GLfloat y = .86f; GLfloat radius = .05f;
	int triangleAmount = 20;
	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(x, y); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			x + (radius * cos(i *  twicePi / triangleAmount)),
			y + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat a = -.55f; GLfloat b = .83f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(a, b); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			a + (radius * cos(i *  twicePi / triangleAmount)),
			b + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat c = -.45f; GLfloat d = .83f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(c, d); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			c + (radius * cos(i *  twicePi / triangleAmount)),
			d + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat e = -.52f; GLfloat f = .8f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(e, f); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			e + (radius * cos(i *  twicePi / triangleAmount)),
			f + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat g = -.6f; GLfloat h = .82f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(g, h); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			g + (radius * cos(i *  twicePi / triangleAmount)),
			h + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();
}
void cloud3()
{
	// glLoadIdentity();
	int i;

	GLfloat x = 0.0f; GLfloat y = .86f; GLfloat radius = .05f;
	int triangleAmount = 20;
	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(x, y); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			x + (radius * cos(i *  twicePi / triangleAmount)),
			y + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat a = .05f; GLfloat b = .83f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(a, b); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			a + (radius * cos(i *  twicePi / triangleAmount)),
			b + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat c = -0.05f; GLfloat d = .83f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(c, d); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			c + (radius * cos(i *  twicePi / triangleAmount)),
			d + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat e = .02f; GLfloat f = .8f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(e, f); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			e + (radius * cos(i *  twicePi / triangleAmount)),
			f + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();

	GLfloat g = .1f; GLfloat h = .82f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(255, 217, 255);
	glVertex2f(g, h); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			g + (radius * cos(i *  twicePi / triangleAmount)),
			h + (radius * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();


}

void bird()
{
	int i;

	GLfloat mm = 0.182f; GLfloat nn = .801f; GLfloat radiusmm = .01f;
	int triangleAmount = 20;
	GLfloat twicePi = 2.0f * PI;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(225, 225, 208);
	glVertex2f(mm, nn); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			mm + (radiusmm * cos(i *  twicePi / triangleAmount)),
			nn + (radiusmm * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();
	glBegin(GL_POLYGON);
	glColor3ub(225, 225, 208);
	glVertex2f(0.1f, 0.8f);
	glVertex2f(0.11f, 0.79f);
	glVertex2f(0.12f, 0.78f);
	glVertex2f(0.16f, 0.77f);
	glVertex2f(0.19f, 0.79f);
	glVertex2f(0.201f, 0.8f);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(217, 217, 217);
	glVertex2f(0.175f, 0.8f);
	glVertex2f(0.15f, 0.8f);
	glVertex2f(0.14f, 0.84f);
	glEnd();


	glBegin(GL_TRIANGLES);
	glColor3ub(242, 242, 242);
	glVertex2f(0.175f, 0.8f);
	glVertex2f(0.144f, 0.8f);
	glVertex2f(0.12f, 0.83f);
	glEnd();
	/////2nd bird////
	glBegin(GL_POLYGON);
	glColor3ub(225, 225, 208);
	glVertex2f(-0.02f, 0.8f);
	glVertex2f(-0.01f, 0.79f);
	glVertex2f(0.0f, 0.78f);
	glVertex2f(0.04f, 0.77f);
	glVertex2f(0.07f, 0.79f);
	glVertex2f(0.081f, 0.8f);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(217, 217, 217);
	glVertex2f(0.055f, 0.8f);
	glVertex2f(0.03f, 0.8f);
	glVertex2f(0.02f, 0.84f);
	glEnd();


	glBegin(GL_TRIANGLES);
	glColor3ub(242, 242, 242);
	glVertex2f(0.055f, 0.8f);
	glVertex2f(0.024f, 0.8f);
	glVertex2f(0.0f, 0.83f);
	glEnd();

	GLfloat mmm = 0.062f; GLfloat nnn = .801f; GLfloat radiusmmm = .01f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(225, 225, 208);
	glVertex2f(mmm, nnn); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			mmm + (radiusmmm * cos(i *  twicePi / triangleAmount)),
			nnn + (radiusmmm * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();
	/////3rd bird/////
	glBegin(GL_POLYGON);
	glColor3ub(225, 225, 208);
	glVertex2f(-0.72f, 0.8f);
	glVertex2f(-0.71f, 0.79f);
	glVertex2f(-0.7f, 0.78f);
	glVertex2f(-0.66f, 0.77f);
	glVertex2f(-0.63f, 0.79f);
	glVertex2f(-0.619f, 0.8f);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(217, 217, 217);
	glVertex2f(-0.645f, 0.8f);
	glVertex2f(-0.67f, 0.8f);
	glVertex2f(-0.68f, 0.84f);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(242, 242, 242);
	glVertex2f(-0.645f, 0.8f);
	glVertex2f(-0.676f, 0.8f);
	glVertex2f(-0.7f, 0.83f);
	glEnd();

	GLfloat mmmm = -0.638f; GLfloat nnnn = .801f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(225, 225, 208);
	glVertex2f(mmmm, nnnn); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			mmmm + (radiusmmm * cos(i *  twicePi / triangleAmount)),
			nnnn + (radiusmmm * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();
	////4th bird////
	GLfloat mmmmm = -0.518f; GLfloat nnnnn = .801f;

	glBegin(GL_TRIANGLE_FAN);
	glColor3ub(225, 225, 208);
	glVertex2f(mmmmm, nnnnn); // center of circle
	for (i = 0; i <= triangleAmount; i++) {
		glVertex2f(
			mmmmm + (radiusmm * cos(i *  twicePi / triangleAmount)),
			nnnnn + (radiusmm * sin(i * twicePi / triangleAmount))
		);
	}
	glEnd();
	glBegin(GL_POLYGON);
	glColor3ub(225, 225, 208);
	glVertex2f(-0.6f, 0.8f);
	glVertex2f(-0.59f, 0.79f);
	glVertex2f(-0.58f, 0.78f);
	glVertex2f(-0.54f, 0.77f);
	glVertex2f(-0.51f, 0.79f);
	glVertex2f(-0.499f, 0.8f);
	glEnd();

	glBegin(GL_TRIANGLES);
	glColor3ub(217, 217, 217);
	glVertex2f(-0.525f, 0.8f);
	glVertex2f(-0.55f, 0.8f);
	glVertex2f(-0.56f, 0.84f);
	glEnd();


	glBegin(GL_TRIANGLES);
	glColor3ub(242, 242, 242);
	glVertex2f(-0.525f, 0.8f);
	glVertex2f(-0.556f, 0.8f);
	glVertex2f(-0.58f, 0.83f);
	glEnd();


}




void fence()
{
	glLineWidth(4);
	glBegin(GL_LINES);
	glColor3ub(255, 255, 102);
	glVertex2f(-1.0f, -0.1f);
	glVertex2f(-0.6f, -0.1f);

	glColor3ub(255, 255, 102);
	glVertex2f(-1.0f, -0.05f);
	glVertex2f(-0.6f, -0.05f);

	glColor3ub(255, 255, 102);
	glVertex2f(-1.0f, 0.0f);
	glVertex2f(-0.6f, 0.0f);

	glColor3ub(255, 255, 102);
	glVertex2f(-1.0f, 0.05f);
	glVertex2f(-0.6f, 0.05f);

	glColor3ub(255, 255, 102);
	glVertex2f(-1.0f, 0.1f);
	glVertex2f(-0.6f, 0.1f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.95f, 0.13f);
	glVertex2f(-0.95f, -0.12f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.9f, 0.13f);
	glVertex2f(-0.9f, -0.12f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.85f, 0.13f);
	glVertex2f(-0.85f, -0.12f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.8f, 0.13f);
	glVertex2f(-0.8f, -0.12f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.75f, 0.13f);
	glVertex2f(-0.75f, -0.12f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.7f, 0.13f);
	glVertex2f(-0.7f, -0.12f);

	glColor3ub(255, 255, 102);
	glVertex2f(-0.65f, 0.13f);
	glVertex2f(-0.65f, -0.12f);

	glEnd();
}


void well()
{

	glBegin(GL_POLYGON);
	glColor3ub(204, 51, 0);
	glVertex2f(-0.9f, -0.35f);
	glVertex2f(-0.9f, -0.55f);
	glVertex2f(-0.85f, -0.575f);
	glVertex2f(-0.8f, -0.59f);
	glVertex2f(-0.7f, -0.59f);
	glVertex2f(-0.65f, -0.575f);
	glVertex2f(-0.6f, -0.55f);
	glVertex2f(-0.6f, -0.35f);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(255, 102, 51);
	glVertex2f(-0.9f, -0.35f);
	glVertex2f(-0.85f, -0.375f);
	glVertex2f(-0.8f, -0.38f);
	glVertex2f(-0.7f, -0.38f);
	glVertex2f(-0.65f, -0.375f);
	glVertex2f(-0.6f, -0.35f);
	glVertex2f(-0.65f, -0.33f);
	glVertex2f(-0.7f, -0.325f);
	glVertex2f(-0.8f, -0.325f);
	glVertex2f(-0.85f, -0.33f);
	glEnd();

	glLineWidth(5);
	glBegin(GL_LINES);
	glColor3ub(204, 51, 0);
	glVertex2f(-0.9f, -0.35f);
	glVertex2f(-0.85f, -0.33f);//
	glVertex2f(-0.85f, -0.33f);
	glVertex2f(-0.8f, -0.325f);//
	glVertex2f(-0.8f, -0.325f);
	glVertex2f(-0.7f, -0.325f);//
	glVertex2f(-0.7f, -0.325f);
	glVertex2f(-0.65f, -0.33f);//
	glVertex2f(-0.65f, -0.33f);
	glVertex2f(-0.6f, -0.35f);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(194, 194, 163);
	glVertex2f(-0.59f, -0.43f);
	glVertex2f(-0.57f, -0.5f);
	glVertex2f(-0.52f, -0.5f);
	glVertex2f(-0.5f, -0.43f);
	glVertex2f(-0.52f, -0.42f);
	glVertex2f(-0.57f, -0.42f);
	glEnd();

	glBegin(GL_POLYGON);
	glColor3ub(38, 154, 214);
	glVertex2f(-0.585f, -0.43f);
	glVertex2f(-0.568f, -0.44f);
	glVertex2f(-0.528f, -0.44f);
	glVertex2f(-0.505f, -0.43f);
	glVertex2f(-0.528f, -0.425f);
	glVertex2f(-0.57f, -0.425f);
	glEnd();

	glLineWidth(3);
	glBegin(GL_LINES);
	glColor3ub(194, 194, 163);
	glVertex2f(-0.59f, -0.43f);
	glVertex2f(-0.57f, -0.39f);//
	glVertex2f(-0.57f, -0.39f);
	glVertex2f(-0.55f, -0.39f);//
	glVertex2f(-0.55f, -0.39f);
	glVertex2f(-0.52f, -0.39f);//
	glVertex2f(-0.52f, -0.39f);
	glVertex2f(-0.5f, -0.43f);//
	glEnd();

	glLineWidth(2.5);
	glBegin(GL_LINES);
	glColor3ub(230, 172, 0);
	glVertex2f(-0.545f, -0.385f);
	glVertex2f(-0.57f, -0.45f);//
	glVertex2f(-0.57f, -0.45f);
	glVertex2f(-0.575f, -0.5f);//
	glVertex2f(-0.575f, -0.5f);
	glVertex2f(-0.58f, -0.53f);//
	glVertex2f(-0.58f, -0.53f);
	glVertex2f(-0.57f, -0.55f);//
	glVertex2f(-0.57f, -0.55f);
	glVertex2f(-0.48f, -0.53f);//
	glEnd();
}


//void StartingText()
//{
//	char text[120];
//	sprintf(text, "VILLAGE SCENARIO", 5.00, 8.00);
//	glColor3f(0, 0, 0);
//	glRasterPos2f(-20, 12);
//	for (int i = 0; text[i] != '\0'; i++)
//	{
//		if (text[i] == ' '  && text[i + 1] == ' ')
//		{
//			glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
//			glRasterPos2f(-32, 02);
//		}
//		else glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
//	}
//	sprintf(text, "  PRESS D FOR DAY VIEW,PRESS N FOR NIGHT VIEW,PRESS R FOR RAIN VIEW", 5.00, 8.00);
//	glColor3f(0, 0, 0);
//	glRasterPos2f(-100, 0);
//	for (int i = 0; text[i] != '\0'; i++)
//	{
//		if (text[i] == ' '  && text[i + 1] == ' ')
//		{
//			glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, text[i]);
//			glRasterPos2f(-30.5, -10);
//		}
//		else glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, text[i]);
//	}
//	sprintf(text, "  CREATED BY-", 5.00, 8.00);
//	glColor3f(0, 0, 0);
//	glRasterPos2f(-100, 0);
//	for (int i = 0; text[i] != '\0'; i++)
//	{
//		if (text[i] == ' '  && text[i + 1] == ' ')
//		{
//			glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, text[i]);
//			glRasterPos2f(18, -25);
//		}
//		else glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, text[i]);
//	}
//	sprintf(text, "  Aayushi Thakkar", 5.00, 8.00);
//	glColor3f(0, 0, 0);
//	glRasterPos2f(-100, 0);
//	for (int i = 0; text[i] != '\0'; i++)
//	{
//		if (text[i] == ' '  && text[i + 1] == ' ')
//		{
//			glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, text[i]);
//			glRasterPos2f(18, -30);
//		}
//		else glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_10, text[i]);
//	}
//
//
//}

//void DrawSphere()
//{
//	glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
//	glEnable(GL_COLOR_MATERIAL);
//	glColor4f(1.0f, 0.0f, 0.0f, 0.0f);
//	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
//	glEnable(GL_DEPTH_TEST);
//	glLoadIdentity();
//	glPushMatrix();
//	glTranslatef(position2, 0.0f, 0.0f);
//	cloud3();
//	glPopMatrix();
//	fence();
//	
//	glPushMatrix();
//	glTranslatef(0.0f, position4, 0.0f);
//	glPopMatrix();
//	glFlush();
//
//}

void display2()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	PointLight(0, 0, 1, 0, 1, 1);
	//DrawSphere();
	glLoadIdentity();
	glutSwapBuffers();

}

struct Point
{
	float x, y;
	unsigned char r, g, b, a;
};
std::vector< Point > points;

void display1(void)
{
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glLineWidth(2);
	
	cloud1();
	cloud2();
	cloud3();
	
	fence();
	
	well();
	
	glOrtho(-50, 50, -50, 50, -1, 1);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	// draw
	glPushMatrix();
	glTranslatef(0.0f, position3, 0.0f);
	glColor3ub(255, 255, 255);
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_COLOR_ARRAY);
	glVertexPointer(2, GL_FLOAT, sizeof(Point), &points[0].x);
	glColorPointer(4, GL_UNSIGNED_BYTE, sizeof(Point), &points[0].r);
	glPointSize(2.5);
	glDrawArrays(GL_POINTS, 0, points.size());
	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_COLOR_ARRAY);
	glPopMatrix();
	glFlush();
	glutSwapBuffers();
}

void display() {
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glLineWidth(2);
	glPushMatrix();
	glTranslatef(position2, 0.0f, 0.0f);
	cloud1();
	cloud2();
	glPopMatrix();
	glPushMatrix();
	glTranslatef(position22, 0.0f, 0.0f);
	bird();
	glPopMatrix();
	
	glPushMatrix();
	glTranslatef(0.0f, 0.0f, 0.0f);
	
	glPopMatrix();
	
	fence();
	
	well();
	
	glFlush();
	glutSwapBuffers();
}
void reshape(int w, int h)
{
	//    std::cout<<"Reshape is called"<<std::endl;
	float aspectRatio = (float)w / (float)h;
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(145, aspectRatio, 1.0, 100.0);
	glMatrixMode(GL_MODELVIEW);

}

void Display(void)
{
	//std::cout<<"Display 1 called"<<std::endl;
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();
	glTranslatef(0, 0, -20);
	//StartingText();
	glFlush();
	glutSwapBuffers();
}

void init(void)
{
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
	glClearDepth(1.0);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glShadeModel(GL_SMOOTH);
	glEnable(GL_COLOR_MATERIAL);
	glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
	glEnable(GL_LIGHT0);
	//std::cout<<"Init is called"<<std::endl;
}
void handleKeypress(unsigned char key, int x, int y) {
	switch (key) {
	case  'd':
		glutDestroyWindow(1);
		glutInitWindowSize(1240, 750);
		glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
		glutCreateWindow("village scenario");
		glutKeyboardFunc(handleKeypress);
		glutDisplayFunc(display);
		PlaySound(TEXT("bird-2.wav"), NULL, SND_ASYNC);
		break;
		break;
	case 'r':
		glutDestroyWindow(1);
		glutInitWindowSize(1240, 750);
		glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
		glutCreateWindow("village scenario");
		glutKeyboardFunc(handleKeypress);
		glutDisplayFunc(display1);
		PlaySound(TEXT("rain-07.wav"), NULL, SND_ASYNC);
		break;
	case 'n':
		glutDestroyWindow(1);
		glutInitWindowSize(1240, 750);
		glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
		glutCreateWindow("village scenario");
		glutKeyboardFunc(handleKeypress);
		glutDisplayFunc(display2);
		PlaySound(TEXT("cricket-2.wav"), NULL, SND_ASYNC);
		glutPostRedisplay();
		break;
	case  'D':
		glutDestroyWindow(1);
		glutInitWindowSize(1240, 750);
		glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
		glutCreateWindow("village scenario");
		glutKeyboardFunc(handleKeypress);
		glutDisplayFunc(display);
		PlaySound(TEXT("bird-2.wav"), NULL, SND_ASYNC);
		break;
		break;
	case 'R':
		glutDestroyWindow(1);
		glutInitWindowSize(1240, 750);
		glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
		glutCreateWindow("village scenario");
		glutKeyboardFunc(handleKeypress);
		glutDisplayFunc(display1);
		PlaySound(TEXT("rain-07.wav"), NULL, SND_ASYNC);
		break;
	case 'N':
		glutDestroyWindow(1);
		glutInitWindowSize(1240, 750);
		glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
		glutCreateWindow("village scenario");
		glutKeyboardFunc(handleKeypress);
		glutDisplayFunc(display2);
		PlaySound(TEXT("cricket-2.wav"), NULL, SND_ASYNC);
		glutPostRedisplay();


	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitWindowSize(1240, 750);
	glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) - 1240) / 2, (glutGet(GLUT_SCREEN_HEIGHT) - 750) / 2);
	glutCreateWindow("village scenario");
	init();
	glutReshapeFunc(reshape);
	glutDisplayFunc(Display);
	for (size_t i = 0; i < 1000; ++i)
	{
		Point pt;
		pt.x = -50 + (rand() % 100);
		pt.y = -50 + (rand() % 100);
		pt.r = 255;
		pt.g = 255;
		pt.b = 255;
		pt.a = 255;
		points.push_back(pt);
	}
	glutTimerFunc(100, cloud, 0);
	//glutTimerFunc(100, sunn, 0);
	//glutTimerFunc(100, boat, 0);
	glutTimerFunc(100, rain, 0);
	glutTimerFunc(100, birdd, 0);
	glutKeyboardFunc(handleKeypress);
	init();
	glutMainLoop();
	return 0;
}